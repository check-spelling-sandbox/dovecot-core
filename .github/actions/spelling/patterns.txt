# See https://github.com/check-spelling/check-spelling/wiki/Configuration-Examples:-patterns

# WORD+ed/es/ing
(?<=[A-Z][A-Z])(?:e[ds]|ing)\b

\bIMAPbase\b

NID_\w+

# typo in old version of upstream
TEXTCAT_RESULT_UNKOWN$

# public apis (?) with typos
\b(?:smtp_client_transaction_get_state_destription|submision_backend_relay_settings)\b

# printf
%s(?!et|ervice)(?=[a-z])

# base64 of `hel...` (generally `hello`)
"aGVsbG8.*?"

# alphabet
ABC\S+YZ

# alt+
\balt(?![eho])(?=[a-z])

# evil greeting
Mo[eu](?:ha)+

# Mime encoded test content
"=[Cc].*"

# Test content
^\s+";.*"

# \0 te(st)...
"AHRlc.*"

# blah
(?i)\b(?:bla(?:die|h|))+(?![cmn])

# frop??
(?i)(?:FROP)+

# credit
\bby [A-Z][a-z]+ [A-Za-z][a-z]+ <.*?\.[a-z]{2,5}>

# Copyright
^ \*\s+Copyright \([cC]\)\s(?:[-,\d]+\s+|and\s)+.*

# mime escaped
=[0-9A-F]{2}(?=[a-z])

# test-mech.c
digest_request->nonce = ".*"

# Etag
\b[0-9a-f]{7}-[0-9a-f]{4,6}-[0-9a-f]{13}\b

_key(?:_id|) = ".{20,}"

test_assert.*".{3,}"

TEST_BUF.*".*"

\^A(?=[A-Za-z])

\\\\s(?!t)

grep '.*?'

# sed search and replace (or line noise)
"s/.*/

\\x[0-9A-F]{2}

# test-lua.c
req:password_verify\(.*\)

# Automatically suggested patterns

# hit-count: 3942 file-count: 124
# hex digits including css/html color classes:
(?:[\\0][xX]|\\u|[uU]\+|#x?|%23|&H)[0-9_a-fA-FgGrR]*?[a-fA-FgGrR]{2,}[0-9_a-fA-FgGrR]*(?:[uUlL]{0,3}|[iu]\d+)\b

# hit-count: 2017 file-count: 872
# #includes
^\s*#include\s*(?:<.*?>|".*?")

# hit-count: 1058 file-count: 148
# libraries
(?i)(?:\b|_)lib(?:re(?=office)|)(?!era[lt]|ero|erty|rar(?:i(?:an|es)|y))(?=[a-z])

# hit-count: 516 file-count: 93
# in check-spelling@v0.0.22+, printf markers aren't automatically consumed
# printf markers
(?<!\\)\\(?:n(?!oselect)|[rt])(?=[a-z]{2,})

# hit-count: 189 file-count: 25
# hex runs
\b[0-9a-fA-F]{16,}\b

# hit-count: 182 file-count: 57
# Compiler flags (Unix, Java/Scala)
# Use if you have things like `-Pdocker` and want to treat them as `docker`
(?:^|[\t ,>"'`=(\[])-(?:(?:J-|)[DPWXY]|[Ll](?!i|ogin)|f(?!inger|uzz))(?=[A-Z]{2,}|[A-Z][a-z]|[a-z]{2,})

# hit-count: 152 file-count: 37
# version suffix <word>v#
(?:(?<=[A-Z]{2})V|(?<=[a-z]{2}|[A-Z]{2})v)\d+(?:\b|(?=[a-zA-Z_]))

# hit-count: 117 file-count: 43
# https/http/file urls
(?:\b(?:https?|ftp|file)://)[-A-Za-z0-9+&@#/*%?=~_|!:,.;]+[-A-Za-z0-9+&@#/*%=~_|]

# hit-count: 103 file-count: 32
# base64 encoded content
([`'"])[-a-zA-Z=;:/0-9+]{3,}=\g{-1}

# hit-count: 46 file-count: 8
# lower URL escaped characters
%[0-9][a-f](?=[a-z]{2,}.*")

# hit-count: 41 file-count: 5
# URL escaped characters
%[0-9A-F][A-F](?=[A-Za-z])

# hit-count: 27 file-count: 13
# This does not cover multiline strings, if your repository has them,
# you'll want to remove the `(?=.*?")` suffix.
# The `(?=.*?")` suffix should limit the false positives rate
# printf
%[csu](?=[a-z]{2,})(?!%)(?=[_a-zA-Z]+(?!%)\b)(?=.*?['"])

# hit-count: 14 file-count: 2
# base64 encoded json
\beyJ[-a-zA-Z=;:/0-9+]+

# hit-count: 12 file-count: 2
# mailto urls
mailto:[-a-zA-Z=;:/?%&0-9+@._]{3,}

# hit-count: 11 file-count: 3
# IPv6
\b(?:[0-9a-fA-F]{0,4}:){3,7}[0-9a-fA-F]{0,4}\b

# hit-count: 11 file-count: 3
# Punycode
\bxn--[-0-9a-z]+

# hit-count: 7 file-count: 2
# bearer auth
\b[Bb]ear[e][r]:? [-a-zA-Z=;:/0-9+.]{3,}

# hit-count: 6 file-count: 3
# uuid:
\b[0-9a-fA-F]{8}-(?:[0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}\b

# hit-count: 5 file-count: 2
# encoded-word
=\?[-a-zA-Z0-9"*%]+\?[BQ]\?[^?]{0,75}\?=

# hit-count: 3 file-count: 1
# pki (base64)
LS0tLS1CRUdJT.*

# hit-count: 3 file-count: 1
# scrypt / argon
\$(?:scrypt|argon\d+[di]*)\$\S+

# hit-count: 2 file-count: 1
# data url in quotes
([`'"])data:(?:[^ `'"].*?|)(?:[A-Z]{3,}|[A-Z][a-z]{2,}|[a-z]{3,}).*\g{-1}

# hit-count: 2 file-count: 1
# apache/old crypt
(['"]|)\$+(?:apr|)1\$+.{8}\$+.{22}\g{-1}

# hit-count: 2 file-count: 1
# perl regex test
[!=]~ (?:/.*/|m\{.*?\}|m<.*?>|m([|!/@#,;']).*?\g{-1})

# hit-count: 2 file-count: 1
# regex choice
\(\?:[^)]+\|[^)]+\)

# hit-count: 1 file-count: 1
# assign regex
= /[^*].*?(?:[a-z]{3,}|[A-Z]{3,}|[A-Z][a-z]{2,}).*/[gi]?(?=\W|$)

# hit-count: 1 file-count: 1
# perl run
perl(?:\s+-[a-zA-Z]\w*)+

# hit-count: 1 file-count: 1
# basic auth
(['"])[Bb]asic [-a-zA-Z=;:/0-9+]{3,}\g{-1}

# hit-count: 1 file-count: 1
# base64 encoded pkcs
\bMII[-a-zA-Z=;:/0-9+]+

# hit-count: 1 file-count: 1
# tar arguments
\b(?:\\n|)g?tar(?:\.exe|)(?:(?:\s+--[-a-zA-Z]+|\s+-[a-zA-Z]+|\s[ABGJMOPRSUWZacdfh-pr-xz]+\b)(?:=[^ ]*|))+

# Questionably acceptable forms of `in to`
# Personally, I prefer `log into`, but people object
# https://www.tprteaching.com/log-into-log-in-to-login/
\b(?:(?:[Ll]og(?:g(?=[a-z])|)|[Ss]ign)(?:ed|ing)?) in to\b

# to opt in
\bto opt in\b

# acceptable duplicates
# ls directory listings
[-bcdlpsw](?:[-r][-w][-SsTtx]){3}[\.+*]?\s+\d+\s+\S+\s+\S+\s+[.\d]+(?:[KMGT]|)\s+
# mount
\bmount\s+-t\s+(\w+)\s+\g{-1}\b
# C types and repeated CSS values
\s(a|ANSWERED|auto|buffalo|center|div|inherit|long|LONG|NIL|none|normal|solid|string|thin|transparent|very)(?: \g{-1})+\s
# C enum and struct
\b(?:enum|struct)\s+(\w+)\s+\g{-1}\b
# go templates
\s(\w+)\s+\g{-1}\s+\`(?:graphql|inject|json|yaml):
# doxygen / javadoc / .net
(?:[\\@](?:brief|defgroup|groupname|link|t?param|return|retval)|(?:public|private|\[Parameter(?:\(.+\)|)\])(?:\s+(?:static|override|readonly|required|virtual))*)(?:\s+\{\w+\}|)\s+(\w+)\s+\g{-1}\s

# macOS file path
(?:Contents\W+|(?!iOS)/)MacOS\b

# Python package registry has incorrect spelling for macOS / Mac OS X
"Operating System :: MacOS :: MacOS X"

# "company" in Germany
\bGmbH\b

# IntelliJ
\bIntelliJ\b

# Commit message -- Signed-off-by and friends
^\s*(?:(?:Based-on-patch|Co-authored|Helped|Mentored|Reported|Reviewed|Signed-off)-by|Thanks-to): (?:[^<]*<[^>]*>|[^<]*)\s*$

# Autogenerated revert commit message
^This reverts commit [0-9a-f]{40}\.$

# ignore long runs of a single character:
\b([A-Za-z])\g{-1}{3,}\b
